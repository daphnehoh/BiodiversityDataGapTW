---
title: "TBIA-data-review"
author: "Daphne & Jun-yi Wu"
date: "2023-12-25"
editor_options: 
  chunk_output_type: console
---

```{r env prep}
setwd("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/")

.packs <- c("httr", "jsonlite", "dplyr", "data.table", "stringr", 
            "ggplot2", "scales", "RColorBrewer", "tidyr", "tidyverse",
            "sf", "parallel", "lwgeom")
sapply(.packs, require, character.only = T)

sessionInfo()

tbia.color_6 <- c("#3E5145", "#76A678", "#E5C851", "#E2A45F", "#F8E3C4", "#C75454")
tbia.color_20 <- c(tbia.color_6, brewer.pal(12, "Set3"), brewer.pal(8, "Set2")) %>% unique()
```



# (1) TBIA Data sources
```{r load raw TBIA data}
# TBIA portal download ver20230612
## load in data
tbia <- fread("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/01.raw_data/ver2_ver20231212_pressConference/tbia_6572701cde93b1001f27a308.csv", 
              sep = ",", colClasses = "character", encoding = "UTF-8")

dim(tbia) # 19,478,136 63
colnames(tbia)
format(object.size(tbia), units = "auto") # 16.7 Gb
```



# (2) Data cleaning
## Removing duplicates
```{r Cleaning step 1: remove duplicated rightsHolder_occurrenceID}
# Find duplicated occurrenceID that is from the same rightsHolder

## cut down tbia dt size for efficiency
tbia_cut <- tbia %>%
  select("id", "datasetName", "occurrenceID", "rightsHolder")

## some data has no occurrenceID (assumed all distinct data)
tbia_blank_occID <- tbia_cut %>% 
  filter(.$occurrenceID == "") # 8,138 has no occurrenceID (all from iOcean)
table(tbia_blank_occID$rightsHolder)
table(tbia_blank_occID$datasetName)
tbia_omited_blank_occID <- tbia_cut %>% 
  filter(.$occurrenceID != "")

## counting & removing duplicate data
tbia_omited_blank_occID$rh_occID <- paste0(tbia_omited_blank_occID$rightsHolder, "_", tbia_omited_blank_occID$occurrenceID)
tbia_unique <- unique(tbia_omited_blank_occID, by = "rh_occID")

## Check -- just checking numbers & contents of duplicated records
n_occur <- data.table(table(tbia_omited_blank_occID$rh_occID)) # see counts of duplicated value
n_occur_morethan2 <- n_occur[n_occur$N > 1,] # 2320 rightsHolder_occurrenceID appeared twice or more
n_occur_morethan2_dN <- tbia_omited_blank_occID[tbia_omited_blank_occID$rh_occID %in% n_occur_morethan2$V1,] # 重複來自哪個資料集
table(n_occur_morethan2_dN$datasetName)
fwrite(n_occur_morethan2, "C:/Users/taibif/Desktop/n_occur_morethan2.csv", 
       row.names = F, quote = T)

tbia_dup <- tbia_omited_blank_occID[tbia_omited_blank_occID$rh_occID %in% n_occur_morethan2$V1,]
tbia_dup1 <- tbia[tbia$id %in% tbia_dup$id,] # 總表
fwrite(tbia_dup1, "C:/Users/taibif/Desktop/tbia_dup1.csv", 
       row.names = F, quote = T)

# ## add back those records without occurrenceID
# tbia1 <- rbind(tbia_unique[,-"rh_occID"], tbia_blank_occID) # remove`rh_occID` column
# format(object.size(tbia1), units = "auto") # 3.4 Gb
# 
# ## save a copy for future loading
# fwrite(tbia1, "C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/tbia_clean1.1_rightsHolder_occurrenceID_duplicates_removed.csv", 
#        row.names = F, quote = T)
# 
# rm(list = ls(all.names = T))
# gc()
# 
# tbia <- fread("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/tbia_clean1.1_rightsHolder_occurrenceID_duplicates_removed.csv", 
#               sep = ",", colClasses = "character", encoding = "UTF-8")

```
### 20231226 - did not removed any records. iOcean data has issue remained to be solved.

```{r Cleaning step 2: remove duplicated datasetName}
# Check number of all datasets in TBIA

## Make recognizable ID to remove later
tbia$dtsN_rH <- paste0(tbia$datasetName, "_", tbia$rightsHolder)

## Final dataset number should be:
length(unique(tbia$datasetName)) # n = 1,968

## 8 duplicated datasets was found when grouping datasetName_rightsHolder
## Reason: Same datasets contributed by 2 different rightsHolder 
tbia_all_dts <- tbia %>%
  group_by(datasetName, rightsHolder) %>%
  summarize(idp = first(dtsN_rH), numRecord = n()) %>%
  ungroup() %>%
  select(idp, datasetName, rightsHolder, numRecord) # n = 1,972

# Check -- check duplicated dataset
n_occur <- data.table(table(tbia_all_dts$datasetName))
sort(n_occur$N, decreasing = T)
dts_twice <- n_occur[n_occur$N == 2][[1]]
dup_dts <- tbia_all_dts[tbia_all_dts$datasetName %in% dts_twice,]
# fwrite(dup_dts, "C:/Users/taibif/Desktop/tbia_clean2.0_check_datasetName_rightsHolder_duplicates.csv", 
#       row.names = F, quote = T)

# Keep one with the most data count, if identical: pick one
# total data count of the removed dataset = 731
# Final data count = 19478136-731 = 19,477,405
# the chosen dataset:
tbia_all_dts2 <- tbia_all_dts %>%
  group_by(datasetName) %>%
  filter(numRecord == max(numRecord)) %>% # choose row with higher record number
  arrange(desc(numRecord), rightsHolder, .by_group = T) %>% # if identical, choose the first rightsHolder by alphabet 
  slice(1) %>%
  ungroup() %>%
  select(idp, datasetName, rightsHolder, numRecord)

# dataset to be removed, 4
dup_toRemove <- dup_dts %>%
  group_by(datasetName) %>%
  filter(numRecord == min(numRecord)) %>% 
  arrange(numRecord, rightsHolder, .by_group = T) %>%
  slice(1) %>%
  ungroup() %>%
  select(idp, datasetName, rightsHolder, numRecord)

# remove from big table
tbia2 <- tbia[!tbia$dtsN_rH %in% dup_toRemove$idp, ]
tbia_clean <- tbia2[, -"dtsN_rH"]
dim(tbia_clean) # 19,477,405

### Final TBIA table
fwrite(tbia_clean, "C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/ver3_ver20231212_gapManual/tbia_v1_duplicates_removed.csv",
       row.names = F, quote = T)

rm(list = ls(all.names = T))
gc()

```
### 20231217 - removed 4 duplicate datasets (731 records)


# (2.1) Data quality statistics
```{r}
tbia <- fread("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/ver3_ver20231212_gapManual/tbia_v1_duplicates_removed.csv",
              sep = ",", colClasses = "character", encoding = "UTF-8")

## Make one column that combines standardL* & standardRawL*, prioritizing data with Raw coordinates
tbia$latitude <- fifelse(tbia$dataGeneralizations == "true", paste0(tbia$standardRawLatitude), paste0(tbia$standardLatitude))
tbia$longitude <- fifelse(tbia$dataGeneralizations == "true", paste0(tbia$standardRawLongitude), paste0(tbia$standardLongitude))

## Extract year from standardDate
tbia$year <- str_extract(tbia$standardDate, "\\d{4}")
tbia$month <- str_extract(tbia$standardDate, "(?<=-)[0-9]{2}(?=-)")

## Select columns needed for analysis only
keepColumn <- c("id", "rightsHolder", "datasetName", "basisOfRecord", "year", "month",  
                "latitude", "longitude", "coordinatePrecision", "coordinateUncertaintyInMeters", "dataGeneralizations",
                "scientificNameID", "taxonID", "scientificName", "taxonRank", "common_name_c", 
                "kingdom", "kingdom_c", "phylum", "phylum_c", "class", "class_c", 
                "order", "order_c", "family", "family_c", "genus", "genus_c") # 27

tbia1 <- tbia %>%
  select(all_of(keepColumn))


# Assign data quality
tbia1[tbia1 == ""] <- NA

tbia2 <- tbia1 %>%
  mutate(dataQuality = case_when(
    !is.na(scientificName) & !is.na(latitude) & !is.na(longitude) & !is.na(year) & !is.na(month) & !is.na(basisOfRecord) & 
      (!is.na(coordinatePrecision) | !is.na(coordinateUncertaintyInMeters)) ~ 'gold',
    
    !is.na(scientificName) & !is.na(latitude) & !is.na(longitude) & !is.na(year) &
      (!is.na(coordinatePrecision) | !is.na(coordinateUncertaintyInMeters)) ~ 'silver',
    
    !is.na(scientificName) & !is.na(latitude) & !is.na(longitude) & !is.na(year) ~ 'bronze',
    
    is.na(scientificName) | is.na(year) | is.na(longitude) | is.na(latitude) ~ 'low',
    TRUE ~ NA_character_
  ))

table(tbia2$dataQuality)

fwrite(tbia2, "02.processed_data/ver3_ver20231212_gapManual/tbia_v2_dataQuality.csv",
       row.names = F, quote = T)

## check how many blank cells in each columns
blank_counts_test <- colSums(is.na(tbia2))
```


# (2.2) Get data points in Taiwan
```{r}
tbia2 <- fread("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/ver3_ver20231212_gapManual/tbia_v2_dataQuality.csv",
              sep = ",", colClasses = "character", encoding = "UTF-8")


# Preparing coordinates
## remove data without coordinates
tbia2_withCoords <- tbia2 %>%
  filter(longitude != "" & latitude != "") # 1,041,906 has no coordinates

# Put points on Taiwan map
tbia2.1 <- tbia2_withCoords %>% 
  group_by(rightsHolder, latitude, longitude) %>% 
  count()

tbia2.2_groupList <- split(tbia2.1, tbia2.1$rightsHolder)

catchLocation <- function(x){
  x %>%
    st_as_sf(coords = c("longitude", "latitude"), remove = F) %>%
    st_set_crs(4326) %>%
    st_join(., shpFile, join = st_intersects, left = T, largest = T) %>% 
    st_drop_geometry(.)
}

## Clip points to the map boundaries
## Takes too long to run, run in parallel
cpu.cores <- detectCores() - 1
cl <- makeCluster(cpu.cores)

clusterEvalQ(cl, { # make sure all clusters are ready
  library(tidyverse)
  library(data.table)
  library(sf)
  library(lwgeom)
  TWshp <- st_read("layers/Taiwan_WGS84_land_ocean_final/Taiwan_WGS84_land_ocean_final.shp")
  TWshp <- st_make_valid(TWshp)
  shpFile <- st_zm(TWshp) %>%
    select(., COUNTYCODE, type, island)
  shpFile <- as(shpFile, "sf")%>%
    st_set_crs(4326)
  sf_use_s2(F)
}
)

system.time(
  tbia2.3 <- parLapply(cl, tbia2.2_groupList, catchLocation)%>% 
    do.call(rbind, .)
)

stopCluster(cl)

fwrite(tbia2.3, "02.processed_data/ver3_ver20231212_gapManual/tbia_v2.3_mapping.csv",
       row.names = F, quote = T)

## combines shp file attribute table with occurrence table
tbia2.4 <- tbia2.3 %>%
  filter(!is.na(COUNTYCODE)) # remove points fall outside of Taiwan territory

fwrite(tbia2.4, "02.processed_data/ver3_ver20231212_gapManual/tbia_v2.4_mapping_noNA.csv",
       row.names = F, quote = T)

system.time(
  tbia3 <- left_join(tbia2_withCoords, tbia2.4, by = c("rightsHolder", "latitude", "longitude"))
)

fwrite(tbia3, "02.processed_data/ver3_ver20231212_gapManual/tbia_v3_att_occ_tables_combined.csv",
       row.names = F, quote = T)

blank_counts_test <- colSums(is.na(tbia3))

## remove data outside Taiwan territory
tbia4 <- tbia3 %>%
  filter(!is.na(COUNTYCODE))

tbia4 <- tbia4 %>%
  select(-n)

fwrite(tbia4, "02.processed_data/ver3_ver20231212_gapManual/tbia_v4_datapoints_inTW.csv",
       row.names = F, quote = T)

blank_counts_test <- colSums(is.na(tbia4))

nrow(tbia2)-nrow(tbia2_withCoords) # 1,041,906 data has no coordinates
nrow(tbia2_withCoords)-nrow(tbia4) # 128,044 data falls outside of Taiwan territory





tbia4 <- fread("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/ver3_ver20231212_gapManual/tbia_v4_datapoints_inTW.csv",
              sep = ",", colClasses = "character", encoding = "UTF-8")


# landsea vs. data quality
land <- tbia4 %>%
  filter(type == "land") %>%
  group_by(type, dataQuality) %>%
  summarize(n = n()) %>%
  mutate(perc = n / sum(n) * 100)

sea <- tbia4 %>%
  filter(type == "ocean") %>%
  group_by(type, dataQuality) %>%
  summarize(n = n()) %>%
  mutate(perc = n / sum(n) * 100)

```


# (2.3) Data quality statistics of rightsHolder
```{r}
tbia3 <- fread("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/ver3_ver20231212_gapManual/tbia_v3_att_occ_tables_combined.csv",
              sep = ",", colClasses = "character", encoding = "UTF-8")

tbia3.1_notTW <- tbia3 %>%
  filter(COUNTYCODE=="")

tbia3$inTW <- fifelse(tbia3$COUNTYCODE=="", F, T)

rightsHolder_dataQuality <- tbia3 %>%
  group_by(inTW, dataQuality, rightsHolder) %>%
  summarise(count = n())

tbia3 %>%
  filter(inTW==T) %>%
  group_by(dataQuality) %>%
  summarise(count = n())

fwrite(rightsHolder_dataQuality, "02.processed_data/ver3_ver20231212_gapManual/tbia_v3.1_rightsHolder_dataQuality_inTW.csv",
       row.names = F, quote = T)
```


# (2.4) basisOfRecord vs. dataQuality
```{r}
tbia4 <- fread("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/ver3_ver20231212_gapManual/tbia_v4_datapoints_inTW.csv",
              sep = ",", colClasses = "character", encoding = "UTF-8")

bordq <- tbia4 %>%
  group_by(basisOfRecord, dataQuality) %>%
  summarize(n = n())

fwrite(bordq, "02.processed_data/ver3_ver20231212_gapManual/tbia_v3.2_basisOfRecord_dataQuality.csv",
       row.names = F, quote = T)
```


# Temporal - descriptive
```{r}
head(tbia4)
table(tbia4$year) %>% as.data.frame()

# Year
# 1900年很多筆，6739筆來自臺灣國家公園生物多樣性資料庫
tbia4[tbia4$year == "1900"] %>% filter(rightsHolder == "臺灣國家公園生物多樣性資料庫")

# subset
tbia4.1 <- tbia4 %>%
  select(id, rightsHolder, year, month, dataQuality, type)

tbia4.1$take <- fifelse(tbia4.1$year == "1900" & tbia4.1$rightsHolder == "臺灣國家公園生物多樣性資料庫", "exclude", paste0(tbia4.1$dataQuality))
table(tbia4.1$take)


# All year
all_year <- tbia4.1 %>%
  select(year) %>%
  mutate(year_category = case_when(year == "" ~ "Unassigned", year < 1980 ~ "<1980", TRUE ~ paste0(.$year))) %>%
  group_by(year_category) %>%
  summarize(n = n())

## year - full bar graph
all_year$year_category <- fct_relevel(all_year$year_category, "Unassigned")
ggplot(all_year, aes(x = year_category, y = n, fill = tbia.color_6[1])) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = tbia.color_6[1]) +
  scale_y_continuous(labels = label_comma(), expand = expansion(mult = c(0, 0))) +
  coord_cartesian(ylim = c(0, 2500000)) +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        legend.position = "none") +
  labs(title = "", x = "年份", y = "資料筆數")

ggsave(filename = "03.results/ver3_ver20231212_gapManual/allRecords_byYears_bar.png", 
       bg = "transparent", width = 8, height = 4)

## year - land vs sea - full bar graph
all_year <- tbia4.1 %>%
  select(year, type) %>%
  mutate(year_category = case_when(year == "" ~ "Unassigned", year < 1980 ~ "<1980", TRUE ~ paste0(.$year))) %>%
  group_by(year_category, type) %>%
  summarize(n = n())

all_year$year_category <- fct_relevel(all_year$year_category, "Unassigned")

land <- ggplot(subset(all_year, type == "land"), aes(x = year_category, y = n, fill = tbia.color_6[2])) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = tbia.color_6[2]) +
  scale_y_continuous(labels = label_comma(), expand = expansion(mult = c(0, 0))) +
  coord_cartesian(ylim = c(0, 2500000)) +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        legend.position = "none",
        axis.title.y = element_blank(),
        axis.title.x = element_blank())
        

sea <- ggplot(subset(all_year, type == "ocean"), aes(x = year_category, y = n, fill = "blue3")) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = "blue3") +
  scale_y_continuous(labels = label_comma(), expand = expansion(mult = c(0, 0))) +
  coord_cartesian(ylim = c(0, 40000)) +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        legend.position = "none",
        axis.title.y = element_blank(),
        axis.title.x = element_blank())

library(cowplot)  
plots <- plot_grid(land, sea, nrow = 2)

ggsave(plots, filename = "03.results/ver3_ver20231212_gapManual/allRecords_byYears_landtype_bar.png", 
       bg = "transparent", width = 8, height = 6)


## year - land vs sea vs dataQuality - bar graph 
all_year <- tbia4.1 %>%
  select(year, type, dataQuality) %>%
  mutate(year_category = case_when(year == "" ~ "Unassigned", year < 1980 ~ "<1980", TRUE ~ paste0(.$year))) %>%
  group_by(year_category, type, dataQuality) %>%
  summarize(n = n())

all_year$year_category <- fct_relevel(all_year$year_category, "Unassigned")
all_year$dataQuality <- factor(all_year$dataQuality, levels = c("gold","silver","bronze","low"))

land <- ggplot(subset(all_year, type == "land"), aes(x = year_category, y = n, fill = dataQuality)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("gold","darkslategray2","darkorange3","darkgrey")) +
  scale_y_continuous(labels = label_comma(), expand = expansion(mult = c(0, 0))) +
  coord_cartesian(ylim = c(0, 2500000)) +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        legend.position = "none",
        axis.title.y = element_blank(),
        axis.title.x = element_blank())

sea <- ggplot(subset(all_year, type == "ocean"), aes(x = year_category, y = n, fill = dataQuality)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("gold","darkslategray2","darkorange3","darkgrey")) +
  scale_y_continuous(labels = label_comma(), expand = expansion(mult = c(0, 0))) +
  coord_cartesian(ylim = c(0, 40000)) +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        legend.position = "none",
        axis.title.y = element_blank(),
        axis.title.x = element_blank())

library(cowplot)  
plots <- plot_grid(land, sea, nrow = 2)

ggsave(plots, filename = "03.results/ver3_ver20231212_gapManual/allRecords_byYears_landtype_dataQuality_bar.png", 
       bg = "transparent", width = 8, height = 6)



# Month
# All month
all_month <- tbia4.1 %>%
  select(month) %>%
  mutate(month_category = case_when(month == "" ~ "Unassigned", TRUE ~ paste0(.$month))) %>%
  group_by(month_category) %>%
  summarize(n = n())

## month - full bar graph
all_month$month_category <- fct_relevel(all_month$month_category, "Unassigned")
ggplot(all_month, aes(x = month_category, y = n, fill = tbia.color_6[1])) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = tbia.color_6[1]) +
  scale_y_continuous(labels = label_comma(), expand = expansion(mult = c(0, 0))) +
  coord_cartesian(ylim = c(0, 2500000)) +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        legend.position = "none") +
  labs(title = "Year distribution of TBIA records", x = "年份", y = "資料筆數")

ggsave(filename = "03.results/ver3_ver20231212_gapManual/allRecords_byMonth_bar.png", 
       bg = "transparent", width = 8, height = 4)


## month - land vs sea - full bar graph
all_month <- tbia4.1 %>%
  select(month, type) %>%
  mutate(month_category = case_when(month == "" ~ "Unassigned", TRUE ~ paste0(.$month))) %>%
  group_by(month_category, type) %>%
  summarize(n = n())

all_month$month_category <- fct_relevel(all_month$month_category, "Unassigned")

land <- ggplot(subset(all_month, type == "land"), aes(x = month_category, y = n, fill = tbia.color_6[2])) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = tbia.color_6[2]) +
  scale_y_continuous(labels = label_comma(), expand = expansion(mult = c(0, 0))) +
  coord_cartesian(ylim = c(0, 2500000)) +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        legend.position = "none",
        axis.title.y = element_blank(),
        axis.title.x = element_blank())
        

sea <- ggplot(subset(all_month, type == "ocean"), aes(x = month_category, y = n, fill = "blue3")) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = "blue3") +
  scale_y_continuous(labels = label_comma(), expand = expansion(mult = c(0, 0))) +
  coord_cartesian(ylim = c(0, 30000)) +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        legend.position = "none",
        axis.title.y = element_blank(),
        axis.title.x = element_blank())

library(cowplot)  
plots <- plot_grid(land, sea, nrow = 2)

ggsave(plots, filename = "03.results/ver3_ver20231212_gapManual/allRecords_byMonth_landtype_bar.png", 
       bg = "transparent", width = 8, height = 6)


# Month and data quality
head(tbia4.1)

all_month <- tbia4.1 %>%
  select(month, type, dataQuality) %>%
  mutate(month_category = case_when(month == "" ~ "Unassigned", TRUE ~ paste0(.$month))) %>%
  group_by(month_category, type, dataQuality) %>%
  summarize(n = n())

all_month$month_category <- fct_relevel(all_month$month_category, "Unassigned")
all_month$dataQuality <- factor(all_month$dataQuality, levels = c("gold","silver","bronze","low"))

land <- ggplot(subset(all_month, type == "land"), aes(x = month_category, y = n, fill = dataQuality)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("gold","darkslategray2","darkorange3","darkgrey")) +
  scale_y_continuous(labels = label_comma(), expand = expansion(mult = c(0, 0))) +
  coord_cartesian(ylim = c(0, 2500000)) +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.title.y = element_blank(),
        axis.title.x = element_blank())
        

sea <- ggplot(subset(all_month, type == "ocean"), aes(x = month_category, y = n, fill = dataQuality)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = c("gold","darkslategray2","darkorange3","darkgrey")) +
  scale_y_continuous(labels = label_comma(), expand = expansion(mult = c(0, 0))) +
  coord_cartesian(ylim = c(0, 30000)) +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.title.y = element_blank(),
        axis.title.x = element_blank())

library(cowplot)  
plots <- plot_grid(land, sea, nrow = 2)

ggsave(plots, filename = "03.results/ver3_ver20231212_gapManual/allRecords_byMonth_landtype_dataQual_bar.png", 
       bg = "transparent", width = 8, height = 6)




```


# Taxa - descriptive
```{r}
tbia4 <- fread("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/ver3_ver20231212_gapManual/tbia_v4_datapoints_inTW.csv",
              sep = ",", colClasses = "character", encoding = "UTF-8")

# Taxa group preparation
tbia.taxa <- tbia4 %>%
  select(id, rightsHolder, dataQuality, type, taxonRank, taxonID, scientificName,
         kingdom, phylum, class, order, family, genus,
         kingdom_c, phylum_c, class_c, order_c, family_c, genus_c) %>%
  mutate_all(~ ifelse(. == "", "NA", .))


# Kingdom
taxa <- tbia.taxa %>%
  mutate(taxaKingdomGroup = case_when(kingdom_c %in% c("古菌界", "細菌界") ~ "古菌與細菌界",
                                      TRUE ~ paste0(.$kingdom_c)))

table(taxa$kingdom_c)
table(taxa$taxaKingdomGroup)


# make taxaSubGroup
# Below Kingdom cannot use Chinese taxa name because it's incomplete
table(taxa$phylum)
`%ni%` <- Negate(`%in%`)

taxa$micro <- fifelse(taxa$kingdom %in% c("Bacteria", "Archaea", "Protozoa", "Chromista"), paste0(taxa$taxaKingdomGroup), "x")
taxa <- taxa %>%
  mutate(fungi = case_when(kingdom == "Fungi" & phylum %ni% c("Ascomycota", "Basidiomycota") ~ "其他真菌",
                           phylum == "Ascomycota" ~ "子囊菌門",
                           phylum == "Basidiomycota" ~ "擔子菌門",
                           TRUE ~ "x"))
taxa <- taxa %>%
  mutate(plant.tmp = case_when(kingdom == "Plantae" & phylum == "NA" ~ "其他植物",
                               kingdom == "Plantae" & phylum %in% c("Charophyta", "Chlorophyta", "Rhodophyta") ~ "藻類植物",
                               kingdom == "Plantae" & phylum %in% c("Anthocerotophyta", "Bryophyta", "Marchantiophyta") ~ "苔蘚植物",
                               kingdom == "Plantae" & class %in% c("Polypodiopsida", "Lycopodiopsida") ~ "蕨類植物",
                               kingdom == "Plantae" & class == "Magnoliopsida" ~ "被子植物",
                               kingdom == "Plantae" & class == c("Cycadopsida", "Ginkgoopsida", "Pinopsida") ~ "裸子植物",
                               TRUE ~ "x"))
taxa$plant <- fifelse(taxa$kingdom == "Plantae" & taxa$plant.tmp == "x", "其他植物", paste0(taxa$plant.tmp))          

taxa <- taxa %>%
  mutate(animal.tmp = case_when(kingdom == "Animalia" & phylum == "Chordata" & class %in% 
                                  c("Chondrichthyes", "Actinopterygii", "Actinopteri", "Elasmobranchii", "Holocephali", "Myxini") ~ "魚類",
                                kingdom == "Animalia" & phylum == "Chordata" & class == "Aves" ~ "鳥綱",
                                kingdom == "Animalia" & phylum == "Chordata" & class == "Amphibia" ~ "兩生綱",
                                kingdom == "Animalia" & phylum == "Chordata" & class == "Reptilia" ~ "爬蟲綱",
                                kingdom == "Animalia" & phylum == "Chordata" & class == "Mammalia" ~ "哺乳綱",
                                kingdom == "Animalia" & phylum == "Chordata" & class == "NA" ~ "其他脊索動物",
                                kingdom == "Animalia" & class == "Insecta" & order == "Coleoptera" ~ "鞘翅目",
                                kingdom == "Animalia" & class == "Insecta" & order == "Lepidoptera" ~ "鱗翅目",
                                kingdom == "Animalia" & class == "Insecta" & order %ni% c("Coleoptera", "Lepidoptera") ~ "其他昆蟲",
                                kingdom == "Animalia" & phylum == "Arthropoda" & class == "Insecta" & order == "NA" ~ "其他昆蟲",
                                kingdom == "Animalia" & phylum == "Arthropoda" & class == "Arachnida" ~ "蛛形綱",
                                kingdom == "Animalia" & phylum == "Arthropoda" & class == "Malacostraca" ~ "軟甲綱",
                                kingdom == "Animalia" & phylum == "Arthropoda" & class %ni% c("Insecta" ,"Arachnida", "Malacostraca") ~ "其他節肢動物",
                                kingdom == "Animalia" & phylum == "Arthropoda" & class == "NA" ~ "其他節肢動物",
                                kingdom == "Animalia" & phylum == "Mollusca" & class == "Bivalvia" ~ "雙殼綱",
                                kingdom == "Animalia" & phylum == "Mollusca" & class == "Gastropoda" ~ "腹足綱",
                                kingdom == "Animalia" & phylum == "Mollusca" & class == "Cephalopoda" ~ "投足綱",
                                kingdom == "Animalia" & phylum == "Mollusca" & class %ni% c("Bivalvia", "Gastropoda", "Cephalopoda") ~ "其他軟體動物",
                                kingdom == "Animalia" & phylum == "Mollusca" & class == "NA" ~ "其他軟體動物",
                                kingdom == "Animalia" & phylum == "Cnidaria" ~ "刺胞動物門",
                                kingdom == "Animalia" & phylum == "Echinodermata" ~ "棘皮動物門",
                                kingdom == "Animalia" & phylum == "NA" ~ "其他動物",
                                TRUE ~ "x"))
taxa$animal <- fifelse(taxa$kingdom == "Animalia" & taxa$animal.tmp == "x", "其他動物", paste0(taxa$animal.tmp))                                     

# combine
taxa <- taxa %>%
  mutate_all(~ifelse(. == 'x', NA, .)) %>%
  unite(taxaSubGroup, micro, fungi, plant, animal, sep = ",", remove = T, na.rm = T)

fwrite(taxa, "02.processed_data/ver3_ver20231212_gapManual/tbia_v4.1_taxaGroup_cat.csv",
       row.names = F, quote = T)

taxaGroup <- taxa %>%
  group_by(taxaKingdomGroup, taxaSubGroup) %>%
  summarize(n = n()) %>%
  mutate(perc = n / sum(n) * 100) %>% 
  arrange(desc(perc)) %>%
  as.data.frame()

taxaGroup_k <- taxa %>%
  group_by(taxaKingdomGroup) %>%
  summarize(n = n()) %>%
  mutate(perc = n / sum(n) * 100) %>% 
  arrange(desc(perc)) %>%
  as.data.frame()

fwrite(taxaGroup_k, "02.processed_data/ver3_ver20231212_gapManual/tbia_v4.1_taxaGroup_k.csv",
       row.names = F, quote = T)


# Group big category for Sankey
taxa <- taxa %>%
  mutate(Sankey6group = case_when(taxa$kingdom %in% c("Bacteria", "Archaea", "Protozoa") ~ "微生物",
                                  taxa$kingdom %in% c("Chromista", "Fungi") ~ "其他生物",
                                  taxa$kingdom == "Plantae" ~ "植物",
                                  taxa$phylum == "Chordata" ~ "脊索動物",
                                  taxa$kingdom == "Animalia" & taxa$phylum != "Chordata" ~ "無脊索動物",
                                  TRUE ~ "無資料"))

system.time(
  tbia5 <- left_join(tbia4, taxa[,c(1,20,21,24)], by = "id")
)

fwrite(tbia5, "02.processed_data/ver3_ver20231212_gapManual/tbia_v5.csv",
       row.names = F, quote = T)

taxa_landtype_dQ <- tbia5 %>%
  group_by(Sankey6group, type) %>%
  summarize(n = n()) %>%
  as.data.frame()

fwrite(taxa_landtype_dQ, "02.processed_data/ver3_ver20231212_gapManual/tbia_v5_sankey.csv",
       row.names = F, quote = T)


# taxa vs quality
taxaQuality <- fread("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/ver3_ver20231212_gapManual/tbia_v4.1_taxaGroup_cat.csv",
                     sep = ",", colClasses = "character", encoding = "UTF-8")

taxa.subset <- c("鳥綱", "被子植物", "哺乳綱", "兩生綱", "鱗翅目", "蕨類植物")

taxaQuality1 <- taxaQuality %>%
  select(id, rightsHolder, dataQuality, type, taxaSubGroup) %>%
  filter(taxaSubGroup %in% taxa.subset)
taxaQuality1$dataQuality <- factor(taxaQuality1$dataQuality, levels = c("gold", "silver", "bronze", "low"))


for (i in taxa.subset) {
  
  df <- taxaQuality1 %>%
    filter(taxaSubGroup == !!i) %>%
    group_by(dataQuality) %>%
    summarize(n = n()) %>%
    mutate(perc = n / sum(n) * 100) %>% 
    arrange(desc(perc))
  
  ggplot(df, aes(x = dataQuality, y = perc, fill = tbia.color_6[6])) +
    geom_bar(stat = "identity") +
    geom_text(aes(label = round(perc, 2), vjust = -1)) +
    geom_text(aes(label = n, vjust = -2.5)) +
    scale_fill_manual(values = tbia.color_6[6]) +
    scale_y_continuous(labels = label_comma(), expand = expansion(mult = c(0, 0))) +
    coord_cartesian(ylim = c(0, 100)) +
    theme_light() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
          panel.grid.minor = element_blank(),
          panel.border = element_blank(),
          legend.position = "none") +
    labs(title = paste(i), y = "%")
  
  filename <- paste("03.results/ver3_ver20231212_gapManual/plot_taxaQuality_", i, ".png", sep = "")
  ggsave(filename, bg = "transparent", width = 3, height = 4)
  
}


# taxa on land & sea
taxaGroup_landsea <- taxa %>%
  group_by(taxaSubGroup, type) %>%
  summarize(n = n())

taxaGroup_landsea_land <- taxaGroup_landsea %>%
  filter(type == "land") %>%
  mutate(perc = n / sum(.$n) * 100) %>% 
  arrange(desc(perc))

taxaGroup_landsea_sea <- taxaGroup_landsea %>%
  filter(type == "ocean") %>%
  mutate(perc = n / sum(.$n) * 100) %>% 
  arrange(desc(perc))

fwrite(taxaGroup_landsea_land, "02.processed_data/ver3_ver20231212_gapManual/tbia_v4.1_taxaGroup_landsea_land.csv",
       row.names = F, quote = T)

fwrite(taxaGroup_landsea_sea, "02.processed_data/ver3_ver20231212_gapManual/tbia_v4.1_taxaGroup_landsea_sea.csv",
       row.names = F, quote = T)


# 6 big group taxa on month distribution
tbia5 <- fread("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/ver3_ver20231212_gapManual/tbia_v5.csv",
              sep = ",", colClasses = "character", encoding = "UTF-8")


taxa.subset <- c("鳥綱", "被子植物", "哺乳綱", "兩生綱", "鱗翅目", "蕨類植物")

taxa6_month <- tbia5 %>%
  select(taxaSubGroup, month) %>%
  filter(taxaSubGroup %in% taxa.subset) 

for (i in taxa.subset) {
  
  df <- taxa6_month %>%
    filter(taxaSubGroup == !!i) %>%
    group_by(month) %>%
    summarize(n = n())
  
  df[1,1] <- "Unassigned"
  
  df$month <- fct_relevel(df$month, "Unassigned")

  ggplot(df, aes(x = month, y = n, fill = tbia.color_6[4])) +
    geom_bar(stat = "identity") +
    scale_fill_manual(values = tbia.color_6[4]) +
    scale_y_continuous(labels = label_comma(), expand = expansion(mult = c(0, 0))) +
    coord_cartesian(ylim = c(0, max(df$n) + 10000)) +
    theme_light() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
          panel.grid.minor = element_blank(),
          panel.border = element_blank(),
          legend.position = "none") +
    labs(title = paste(i), x = "月份", y = "資料筆數")
  
  filename <- paste("03.results/ver3_ver20231212_gapManual/plot_taxa6month_", i, ".png", sep = "")
  ggsave(filename, bg = "transparent", width = 3, height = 4)
  
}
```



# Spatial
## data points outside Taiwan
```{r}
# data points outside Taiwan
tbia2.3 <- fread("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/ver3_ver20231212_gapManual/tbia_v2.3_mapping.csv",
              sep = ",", colClasses = "character", encoding = "UTF-8")

notTW <- tbia2.3 %>%
  filter(COUNTYCODE=="")

notTW_stats <- notTW %>%
  group_by(rightsHolder, latitude, longitude) %>% 
  count()

notTW_loc_list <- split(notTW_stats, notTW_stats$rightsHolder)

catchLocation <- function(x){
  x %>%
    st_as_sf(coords = c("longitude", "latitude"), remove = F) %>% # set coordinates
    st_set_crs(4326) %>% # table transforms to polygon
    st_join(., shpFile, join = st_intersects, left = T, largest = T) %>% 
    st_drop_geometry(.)
}


#### parallel ####
cpu.cores <- detectCores() -1
cl <- makeCluster(cpu.cores)

clusterEvalQ(cl, { # make sure all clusters are ready
  library(tidyverse)
  library(data.table)
  library(sf)
  library(lwgeom)
  TWshp <- st_read("layers/Taiwan_WGS84_land_ocean_final/Taiwan_WGS84_land_ocean_final.shp")
  TWshp <- st_make_valid(TWshp)
  shpFile <- st_zm(TWshp) %>%
    select(., type)
  shpFile <- as(shpFile, "sf")%>%
    st_set_crs(4326)
  sf_use_s2(F)
}
)

system.time(
  notTWlayer <- parLapply(cl, notTW_loc_list, catchLocation)%>% 
    do.call(rbind, .)
)

stopCluster(cl)

datapoints_sf <- st_as_sf(notTWlayer, coords = c("longitude", "latitude"), crs = 4326)
TW_layer <- st_read("layers/Taiwan_WGS84_land_ocean_final/Taiwan_WGS84_land_ocean_final.shp")
st_write(datapoints_sf, "03.results/ver3_ver20231212_gapManual/notTW_layer.shp")

```

## data points in grid
```{r #########}
tbia5 <- fread("C:/Users/taibif/Desktop/Daphne/TBIA-data-review/02.processed_data/ver3_ver20231212_gapManual/tbia_v5.csv",
              sep = ",", colClasses = "character", encoding = "UTF-8")

tbia5.nolow <- tbia5[!(tbia5$dataQuality=="low"), ]

tbia5_stats <- tbia5.nolow %>% 
  group_by(datasetName, latitude, longitude) %>% 
  count()

tbia5_loc_list <- split(tbia5_stats, tbia5_stats$datasetName)
tbia5_loc_list <- tbia5_loc_list[1:10]


catchLocation <- function(x){
  x %>%
    st_as_sf(coords = c("longitude", "latitude"), remove=FALSE) %>% # set coordinates
    st_set_crs(4326) %>%  # table transform to polygon
    st_join(., dg_grid, join = st_intersects, left = TRUE, largest=TRUE) %>% 
    st_drop_geometry(.)
}

#### parallel ####
cpu.cores <- detectCores() -1
cl <- makeCluster(cpu.cores)
clusterEvalQ(cl, { # make sure all clusters are ready
  library(tidyverse)
  library(data.table)
  library(sf)
  library(lwgeom)
  dg_grid <- st_read("layers/tw_wgs84_grid/0_05degree_tw_landocean_grid.shp")
  dg_grid <- as(dg_grid, "sf")%>%
    st_set_crs(4326)
  sf_use_s2(F)
}
)

system.time(
  tbia5grid_loc_final <- parLapply(cl, tbia5_loc_list, catchLocation)%>% 
    do.call(rbind,.)
)

stopCluster(cl)

datapoints_grid <- tbia5grid_loc_final %>% 
  group_by(id) %>% 
  summarise(number_of_occ = sum(n))

dg_grid <- st_read("layers/tw_wgs84_grid/0_05degree_tw_landocean_grid.shp")
dg_grid_final <- merge(dg_grid, datapoints_grid, by = "id", all.x = TRUE)
dg_grid_final$number_of_occ <- ifelse(is.na(dg_grid_final$number_of_occ), 0,  dg_grid_final$number_of_occ)

st_write(dg_grid_final, "03.results/ver3_ver20231212_gapManual/grid10km.shp")

# backup table for future rerun use
datapoints_grid_sf <- st_as_sf(tbia5grid_loc_final, coords = c("longitude", "latitude"), crs = 4326)
fwrite(datapoints_grid_sf, "02.processed_data/ver3_ver20231212_gapManual/tbia_v5_datapoints_grid_sf_10km.csv",
       row.names = F, quote = T)

```





