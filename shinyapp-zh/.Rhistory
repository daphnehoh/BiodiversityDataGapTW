}
group.habitats.df <- do.call(rbind, df_taxa.unrecorded.taxa.prop.habitats) %>%
filter(!is.na(habitat) & habitat != "false") # excluding NA and false count
return(group.habitats.df)
}
taicol_habitat_count <- process_habitats(taicol)
tbia_habitat_count <- process_habitats(tbia)
#### combine the counts
names(taicol_habitat_count)[3] <- "taicol.count"
tbia_habitat_count
taicol_habitat_count
df_counts_by_habitats <- left_join(taicol_habitat_count, tbia_habitat_count, by = c("taxaSubGroup", "habitat")) %>%
filter(taxaSubGroup != "Unclassified") %>%
mutate_all(~replace_na(., 0)) %>%
mutate(cum.total = taicol.count - record.count)
df_counts_by_habitats
fwrite(df_counts_by_habitats, "www/data/processed/df_counts_by_habitats.csv",
row.names = F, quote = T)
taicol_species <- taicol %>%
filter(taxonRank %in% species_infraspecies) %>%
distinct(taxaSubGroup, simple_scientificName, .keep_all = TRUE) %>%
select(taxonID, taxaSubGroup, family, genus, simple_scientificName) %>%
filter(if_all(everything(), ~ !grepl("incertae sedis", ., ignore.case = TRUE))) # remove rows containing 'incertae sedis'
tbia_recorded_species <- tbia %>%
filter(taxonRank %in% species_infraspecies) %>%
distinct(taxaSubGroup, simple_scientificName, .keep_all = TRUE) %>%
select(taxonID)
taicol_species$tbia.recorded <- ifelse(taicol_species$taxonID %in% tbia_recorded_species$taxonID, TRUE, FALSE)
table(taicol_species$tbia.recorded)
taicol_species$recorded <- fifelse(taicol_species$tbia.recorded == TRUE,
paste0("[Recorded] ", taicol_species$simple_scientificName), taicol_species$simple_scientificName)
fwrite(taicol_species, "www/data/processed/df_tree.csv",
row.names = F, quote = T)
df_time <- tbia[, c("id", "year", "month", "taxaSubGroup")]
fwrite(df_time, "www/data/processed/df_time.csv",
row.names = F, quote = T)
grid5km_sf <- st_read("tmp/layers/TW_WGS84_land&ocean_grids/0_05degree_tw_landocean_grid.shp")
# load the tbia table
df_map <- tbia[, c("id", "longitude", "latitude", "coordinatePrecision", "coordinateUncertaintyInMeters", "taxaSubGroup")]
## 1. exclude uncertainty in distance
table(df_map$coordinatePrecision)
table(df_map$coordinateUncertaintyInMeters)
df_map <- df_map[df_map$coordinateUncertaintyInMeters <= 5000,] # exclude > 5km (5000 meter) for 5km grid plotting
## 2. map All records to grid
df_map_stats <- df_map %>%
group_by(taxaSubGroup, latitude, longitude) %>%
count()
df_map_list <- split(df_map_stats, df_map_stats$taxaSubGroup)
catchLocation <- function(x){
x %>%
st_as_sf(coords = c("longitude", "latitude"), remove = FALSE) %>% # set coordinates
st_set_crs(4326) %>%  # table transform to polygon
st_join(., dg_grid, join = st_intersects, left = TRUE, largest = TRUE) %>%
st_drop_geometry(.)
}
#### parallel ####
cpu.cores <- detectCores() - 8
cl <- makeCluster(cpu.cores)
#### parallel ####
cpu.cores <- detectCores() - 8
cpu.cores
cl <- makeCluster(cpu.cores)
df_map_list
cl <- makeCluster(cpu.cores)
cl
cl <- makeCluster(cpu.cores)
makeCluster(cpu.cores)
makeCluster
tbia <- fread("www/data/processed/tbia_habitat.csv",
sep = ",", colClasses = "character", encoding = "UTF-8", na.strings = c("", "NA", "N/A"))
setwd("C:/Users/taibi/Documents/GitHub/BiodiversityDataGapTW/shinyapp/BiodiversityDataGapTW-shinyapp/")
.packs <- c("httr", "jsonlite", "data.table",
"dplyr", "stringr", "tidyverse",
"sf", "parallel", "lwgeom")
sapply(.packs, require, character.only = TRUE)
tbia <- fread("www/data/processed/tbia_habitat.csv",
sep = ",", colClasses = "character", encoding = "UTF-8", na.strings = c("", "NA", "N/A"))
taicol <- fread("www/data/processed/TaiCOL_taxon_20240528_taxaSubGroup.csv",
sep = ",", colClasses = "character", encoding = "UTF-8", na.strings = c("", "NA", "N/A"))
species_infraspecies <- c("species", "subspecies", "variety", "subvariety", "form", "subform", "special form")
grid5km_sf <- st_read("tmp/layers/TW_WGS84_land&ocean_grids/0_05degree_tw_landocean_grid.shp")
# load the tbia table
df_map <- tbia[, c("id", "longitude", "latitude", "coordinatePrecision", "coordinateUncertaintyInMeters", "taxaSubGroup")]
## 1. exclude uncertainty in distance
table(df_map$coordinatePrecision)
table(df_map$coordinateUncertaintyInMeters)
df_map <- df_map[df_map$coordinateUncertaintyInMeters <= 5000,] # exclude > 5km (5000 meter) for 5km grid plotting
## 2. map All records to grid
df_map_stats <- df_map %>%
group_by(taxaSubGroup, latitude, longitude) %>%
count()
df_map_list <- split(df_map_stats, df_map_stats$taxaSubGroup)
grid5km_sf
catchLocation <- function(x){
x %>%
st_as_sf(coords = c("longitude", "latitude"), remove = FALSE) %>% # set coordinates
st_set_crs(4326) %>%  # table transform to polygon
st_join(., dg_grid, join = st_intersects, left = TRUE, largest = TRUE) %>%
st_drop_geometry(.)
}
#### parallel ####
cpu.cores <- detectCores() - 8
cl <- makeCluster(cpu.cores)
cl
clusterEvalQ(cl, { # make sure all clusters are ready
library(tidyverse)
library(data.table)
library(sf)
library(lwgeom)
dg_grid <- st_read("tmp/layers/TW_WGS84_land&ocean_grids/0_05degree_tw_landocean_grid.shp")
dg_grid <- as(dg_grid, "sf")%>%
st_set_crs(4326)
sf_use_s2(F)
}
)
system.time(
df_map_grid <- parLapply(cl, df_map_list, catchLocation)%>%
do.call(rbind,.))
stopCluster(cl)
### 3 make all records table
allOccCount_grid_table <- df_map_grid %>%
group_by(taxaSubGroup) %>%
summarise(allOccCount = sum(n))
allOccCount_grid_table
fwrite(allOccCount_grid_table, "www/data/processed/df_spatial_allOccCount_grid_table.csv",
row.names = F, quote = T)
### 4 make All records shp
allOccCount <- df_map_grid %>%
group_by(id) %>%
summarise(occCount = sum(n))
allOccCount
### 4.1 combine grid counts with 5km geometry
allOccCount_grid <- merge(allOccCount, grid5km_sf, by = "id", all.x = TRUE)
st_write(allOccCount_grid, "www/data/processed/df_map.shp")
allOccCount_grid
### 5 make taxaSubGroup
taxaOccCount <- df_map_grid %>%
group_by(taxaSubGroup, id) %>%
summarise(occCount = sum(n))
taxaOccCount
### 5.1 combine grid counts with 5km geometry
taxaOccCount_grid <- merge(taxaOccCount, grid5km_sf, by = "id", all.x = TRUE)
names(taxaOccCount_grid) <- c("id", "tSG", "occCount", "geometry") # rename because ESRI cannot save long field name
st_write(taxaOccCount_grid, "www/data/processed/df_taxa_map.shp", append = TRUE)
taxaOccCount_grid
df_gapCount <- st_read("www/data/processed/df_map.shp")
df_gapCount <- df_gapCount %>%
mutate(priority = case_when(occCount < 10 ~ "Priority",
occCount >= 10 & occCount < 20 ~ "Intermediate",
occCount > 20 ~ "Non-priority"))
st_write(df_gapCount, "www/data/processed/df_gapCount_table.shp",
row.names = F, quote = T)
# save as table
df_gapCount_table <- as.data.frame(df_gapCount) %>%
group_by(priority) %>%
summarise(gridCount = sum(occCount))
fwrite(df_gapCount_table, "www/data/processed/df_gapCount_table.csv",
row.names = F, quote = T)
gc()
shiny::runApp()
tbia <- fread("www/data/processed/tbia_habitat.csv",
sep = ",", colClasses = "character", encoding = "UTF-8", na.strings = c("", "NA", "N/A"))
setwd("C:/Users/taibi/Documents/GitHub/BiodiversityDataGapTW/shinyapp/BiodiversityDataGapTW-shinyapp/")
setwd("C:/Users/taibi/Documents/GitHub/BiodiversityDataGapTW/shinyapp-zh/")
.packs <- c("httr", "jsonlite", "data.table",
"dplyr", "stringr", "tidyverse",
"sf", "parallel", "lwgeom")
sapply(.packs, require, character.only = TRUE)
tbia <- fread("www/data/processed/tbia_habitat.csv",
sep = ",", colClasses = "character", encoding = "UTF-8", na.strings = c("", "NA", "N/A"))
table(tbia$year)
table(tbia$year) %>% View()
26+3+31+97
shiny::runApp()
runApp()
runApp()
occ.grid5km_sf <- st_read("www/data/layers/5km/to_grid5km.shp")
occ.grid5km_sf <- st_read("www/data/layers/5km/0_05degree_tw_landocean_grid.shp")
runApp()
runApp()
shiny::runApp()
setwd("C:/Users/taibi/Documents/GitHub/BiodiversityDataGapTW/shinyapp-zh/")
.packs <- c("httr", "jsonlite", "data.table",
"dplyr", "stringr", "tidyverse",
"sf", "parallel", "lwgeom")
sapply(.packs, require, character.only = TRUE)
tbia <- fread("C:/Users/taibi/Documents/GitHub/TBIA-data-review/02.processed_data/ver5_ver20240704_shiny/tbia5_vtaxa.csv",
sep = ",", colClasses = "character", encoding = "UTF-8", na.strings = c("", "NA", "N/A"))
names(tbia)
head(tbia)
# remove unwanted columns
keep <- c("id", "year", "month",
"latitude", "longitude", "coordinatePrecision", "coordinateUncertaintyInMeters",
"taxonID", "taxonRank", "taxaSubGroup",
"kingdom", "phylum", "class", "order", "family", "genus", "scientificName", "simple_scientificName")
tbia <- tbia %>%
select(all_of(keep))
keep <- c("rank","taxon_id","simple_name","common_name_c",
"is_endemic","alien_type","is_terrestrial","is_freshwater","is_brackish","is_marine","is_in_taiwan",
"kingdom","kingdom_c","phylum","phylum_c","class","class_c","order","order_c","family","family_c","genus","genus_c")
df.taicol.list <- fread("www/data/raw/TaiCOL_taxon_20240621.csv", select = keep,
sep = ",", colClasses = "character", encoding = "UTF-8", na.strings = c("", "NA", "N/A"))
df.taicol.list <- df.taicol.list %>%
filter(is_in_taiwan == "true") # 94,684
df.taicol.list$simple_scientificName <- str_extract(df.taicol.list$simple_name, "^\\w+ \\w+")
# use same column name
names(df.taicol.list)
names(df.taicol.list)[1] <- "taxonRank"
names(df.taicol.list)[2] <- "taxonID"
# change string from title to lower case
df.taicol.list$taxonRank <- tolower(df.taicol.list$taxonRank)
df.taicol.list
`%ni%` <- Negate(`%in%`)
taxa <- df.taicol.list
taxa$micro <- fifelse(taxa$simple_name %in% c("Bacteria", "Archaea", "Protozoa", "Chromista"), paste0(taxa$simple_name), "x")
taxa$micro.k <- fifelse(taxa$kingdom %in% c("Bacteria", "Archaea", "Protozoa", "Chromista"), paste0(taxa$kingdom), "x")
taxa$virus <- fifelse(taxa$kingdom %in% c("Orthornavirae", "Bamfordvirae", "Heunggongvirae", "Pararnavirae",
"Ribozyviria kingdom incertae sedis", "Shotokuvirae", "Viruses kingdom incertae sedis"), "Viruses", "x")
taxa <- taxa %>%
mutate(fungi = case_when(simple_name == "Fungi" ~ "Other fungi",
kingdom == "Fungi" & phylum %ni% c("Ascomycota", "Basidiomycota") ~ "Other fungi",
phylum == "Ascomycota" ~ "Ascomycota",
phylum == "Basidiomycota" ~ "Basidiomycota",
TRUE ~ "x"))
taxa <- taxa %>%
mutate(plant.tmp = case_when(simple_name == "Plantae" ~ "Other plants",
kingdom == "Plantae" & is.na(phylum) ~ "Other plants",
kingdom == "Plantae" & phylum %in% c("Charophyta", "Chlorophyta", "Rhodophyta") ~ "Algae",
kingdom == "Plantae" & phylum %in% c("Anthocerotophyta", "Bryophyta", "Marchantiophyta") ~ "Mossess",
kingdom == "Plantae" & class %in% c("Polypodiopsida", "Lycopodiopsida") ~ "Ferns",
kingdom == "Plantae" & class == "Magnoliopsida" ~ "Angiosperms",
kingdom == "Plantae" & class %in% c("Cycadopsida", "Ginkgoopsida", "Pinopsida") ~ "Gymnosperms",
TRUE ~ "x"))
taxa$plant <- fifelse(taxa$kingdom == "Plantae" & taxa$plant.tmp == "x", "Other plants", paste0(taxa$plant.tmp))
taxa <- taxa %>%
mutate(animal.tmp = case_when(simple_name == "Animalia" ~ "Other animals",
kingdom == "Animalia" & phylum == "Chordata" & class %in%
c("Chondrichthyes", "Actinopterygii", "Actinopteri", "Elasmobranchii", "Holocephali", "Myxini") ~ "Fishes",
kingdom == "Animalia" & phylum == "Chordata" & class == "Aves" ~ "Birds",
kingdom == "Animalia" & phylum == "Chordata" & class == "Amphibia" ~ "Amphibians",
kingdom == "Animalia" & phylum == "Chordata" & class == "Reptilia" ~ "Reptiles",
kingdom == "Animalia" & phylum == "Chordata" & class == "Mammalia" ~ "Mammals",
kingdom == "Animalia" & phylum == "Chordata" & class == "NA" ~ "Other chordates",
kingdom == "Animalia" & class == "Insecta" & order == "Coleoptera" ~ "Coleoptera",
kingdom == "Animalia" & class == "Insecta" & order == "Lepidoptera" ~ "Lepidoptera",
kingdom == "Animalia" & class == "Insecta" & order %ni% c("Coleoptera", "Lepidoptera") ~ "Other insects",
kingdom == "Animalia" & phylum == "Arthropoda" & class == "Insecta" & is.na(order) ~ "Other insects",
kingdom == "Animalia" & phylum == "Arthropoda" & class == "Arachnida" ~ "Arachnida",
kingdom == "Animalia" & phylum == "Arthropoda" & class == "Malacostraca" ~ "Malacostraca",
kingdom == "Animalia" & phylum == "Arthropoda" & class %ni% c("Insecta" ,"Arachnida", "Malacostraca") ~ "Other arthropods",
kingdom == "Animalia" & phylum == "Arthropoda" & is.na(class) ~ "Other arthropods",
kingdom == "Animalia" & phylum == "Mollusca" & class == "Bivalvia" ~ "Bivalves",
kingdom == "Animalia" & phylum == "Mollusca" & class == "Gastropoda" ~ "Gastropods",
kingdom == "Animalia" & phylum == "Mollusca" & class == "Cephalopoda" ~ "Cephalopods",
kingdom == "Animalia" & phylum == "Mollusca" & class %ni% c("Bivalvia", "Gastropoda", "Cephalopoda") ~ "Other molluscs",
kingdom == "Animalia" & phylum == "Mollusca" & is.na(class) ~ "Other molluscs",
kingdom == "Animalia" & phylum == "Cnidaria" ~ "Cnidarians",
kingdom == "Animalia" & phylum == "Echinodermata" ~ "Echinoderms",
kingdom == "Animalia" & is.na(phylum) ~ "Other animals",
TRUE ~ "x"))
taxa$animal <- fifelse(taxa$kingdom == "Animalia" & taxa$animal.tmp == "x", "Other animals", paste0(taxa$animal.tmp))
# combine and make taxaSubGroup
taxa1 <- taxa %>%
mutate_all(~ifelse(. == 'x', NA, .)) %>%
unite(taxaSubGroup, micro, micro.k, virus, fungi, plant, animal, sep = ",", remove = T, na.rm = T) %>%
select(-c(plant.tmp, animal.tmp, is_in_taiwan))
# those with incomplete taxa levels so the categorizing failed
table(taxa1$taxaSubGroup) # 21 empty
taxa1 <- taxa1 %>%
mutate(taxaSubGroup = replace(taxaSubGroup, taxaSubGroup %in% "", "Unclassified"))
taxa2 <- taxa1 %>%
mutate(is_terrestrial = replace(is_terrestrial, is_terrestrial == "true", "is_terrestrial")) %>%
mutate(is_freshwater = replace(is_freshwater, is_freshwater == "true", "is_freshwater")) %>%
mutate(is_brackish = replace(is_brackish, is_brackish == "true", "is_brackish")) %>%
mutate(is_marine = replace(is_marine, is_marine == "true", "is_marine"))
# final TaiCOL table that classified with taxaSubGroup
fwrite(taxa2, "www/data/processed/TaiCOL_taxon_20240621_taxaSubGroup.csv",
row.names = F, quote = T)
taxa2 <- fread("www/data/processed/TaiCOL_taxon_20240621_taxaSubGroup.csv",
sep = ",", colClasses = "character", encoding = "UTF-8", na.strings = c("", "NA", "N/A"))
habitat <- select(taxa2, taxonID, is_terrestrial, is_freshwater, is_brackish, is_marine)
tbia1 <- left_join(tbia, habitat, by = "taxonID")
fwrite(tbia1, "www/data/processed/tbia_habitat.csv",
row.names = F, quote = T)
head(tbia1)
gc()
tbia <- fread("www/data/processed/tbia_habitat.csv",
sep = ",", colClasses = "character", encoding = "UTF-8", na.strings = c("", "NA", "N/A"))
taicol <- fread("www/data/processed/TaiCOL_taxon_20240621_taxaSubGroup.csv",
sep = ",", colClasses = "character", encoding = "UTF-8", na.strings = c("", "NA", "N/A"))
species_infraspecies <- c("species", "subspecies", "variety", "subvariety", "form", "subform", "special form")
species_infraspecies <- c("species", "subspecies", "variety", "subvariety", "form", "subform", "special form")
# (1)
## % record matched to highest taxon rank
df_taxa.rank <- data.frame(table(tbia$taxonRank))
names(df_taxa.rank) <- c("rank", "count")
### grouping the subs together
df_taxa.rank$taxonRank <- fifelse(df_taxa.rank$rank %in% species_infraspecies,
"(infra)species",
paste0(df_taxa.rank$rank))
fwrite(df_taxa.rank, "www/data/processed/df_taxa.rank.csv",
row.names = F, quote = T)
# (2)
## % record (infra)species rank matched to TaiCOL
df_taxa.rank.at.species <- tbia %>%
filter(taxonRank %in% species_infraspecies) %>%
summarise(count = n_distinct(simple_scientificName)) %>%
mutate(proportion = count / 64542 * 100) %>% # TaiCOL last stats 20240610
bind_rows(data.frame(count = 64542 - .$count, proportion = 100 - .$proportion)) %>%
mutate(category = c("Recorded", "Unrecorded"))
fwrite(df_taxa.rank.at.species, "www/data/processed/df_taxa.rank.at.species.csv",
row.names = F, quote = T)
# (3)
## The XX% of the unrecorded TaiCOL taxa on TBIA
### Select habitat: All
species_infraspecies <- c("species", "subspecies", "variety", "subvariety", "form", "subform", "special form")
group.all <- taicol %>%
filter(taxonRank %in% species_infraspecies) %>%
distinct(taxaSubGroup, simple_scientificName, .keep_all = TRUE) %>%
group_by(taxaSubGroup) %>%
summarise(taicol.count = n())
sum(group.all$taicol.count) # 63,800 species level
### get total number of species (un)recorded in TBIA
df_taxa.unrecorded.taxa.prop <- tbia %>%
filter(taxonRank %in% species_infraspecies) %>%
distinct(taxaSubGroup, simple_scientificName, .keep_all = TRUE) %>% # to remove infraspecies count
group_by(taxaSubGroup) %>%
summarise(record.count = n())
### combine counts of TBIA + TaiCOL above
df_taxa.unrecorded.taxa.prop.groupAll <- left_join(group.all, df_taxa.unrecorded.taxa.prop, by = "taxaSubGroup")
df_taxa.unrecorded.taxa.prop.groupAll <-  df_taxa.unrecorded.taxa.prop.groupAll %>%
rowwise() %>%
mutate(record.prop = round(record.count / taicol.count * 100, 2),
taicol.prop = round(100 - record.prop, 2)) %>%
ungroup() %>%
filter(taxaSubGroup != "Unclassified") %>%
mutate_all(~replace_na(., 0)) %>%
mutate(cum.total = taicol.count - record.count)
#filter(!grepl("Other ", taxaSubGroup) & taxaSubGroup != "Unclassified") # remove "Other x" from df
fwrite(df_taxa.unrecorded.taxa.prop.groupAll, "www/data/processed/df_taxa.unrecorded.taxa.prop.groupAll.csv",
row.names = F, quote = T)
df_taxa.unrecorded.taxa.prop.groupAll
process_habitats <- function(df) {
species_infraspecies <- c("species", "subspecies", "variety", "subvariety", "form", "subform", "special form")
habitats <- c("is_terrestrial", "is_freshwater", "is_brackish", "is_marine")
# summarise count by habitat
df_taxa.unrecorded.taxa.prop.habitats <- map(habitats, ~{
df %>%
filter(taxonRank %in% species_infraspecies) %>%
distinct(taxaSubGroup, simple_scientificName, .keep_all = TRUE) %>% # not counting infraspecies
group_by(taxaSubGroup, .data[[.x]]) %>% # group and count separately for each habitat
summarise(record.count = n())
})
# rename column name of each habitat "is_*" to "habitat" for easy grouping
for (i in seq_along(df_taxa.unrecorded.taxa.prop.habitats)) {
df_taxa.unrecorded.taxa.prop.habitats[[i]] <- rename(df_taxa.unrecorded.taxa.prop.habitats[[i]], habitat = 2)
}
group.habitats.df <- do.call(rbind, df_taxa.unrecorded.taxa.prop.habitats) %>%
filter(!is.na(habitat) & habitat != "false") # excluding NA and false count
return(group.habitats.df)
}
#### apply summarize function
taicol_habitat_count <- process_habitats(taicol)
tbia_habitat_count <- process_habitats(tbia)
names(taicol_habitat_count)[3] <- "taicol.count"
df_counts_by_habitats <- left_join(taicol_habitat_count, tbia_habitat_count, by = c("taxaSubGroup", "habitat")) %>%
filter(taxaSubGroup != "Unclassified") %>%
mutate_all(~replace_na(., 0)) %>%
mutate(cum.total = taicol.count - record.count)
fwrite(df_counts_by_habitats, "www/data/processed/df_counts_by_habitats.csv",
row.names = F, quote = T)
df_counts_by_habitats
taicol_species <- taicol %>%
filter(taxonRank %in% species_infraspecies) %>%
distinct(taxaSubGroup, simple_scientificName, .keep_all = TRUE) %>%
select(taxonID, taxaSubGroup, family, genus, simple_scientificName) %>%
filter(if_all(everything(), ~ !grepl("incertae sedis", ., ignore.case = TRUE))) # remove rows containing 'incertae sedis'
tbia_recorded_species <- tbia %>%
filter(taxonRank %in% species_infraspecies) %>%
distinct(taxaSubGroup, simple_scientificName, .keep_all = TRUE) %>%
select(taxonID)
taicol_species$tbia.recorded <- ifelse(taicol_species$taxonID %in% tbia_recorded_species$taxonID, TRUE, FALSE)
table(taicol_species$tbia.recorded)
taicol_species$recorded <- fifelse(taicol_species$tbia.recorded == TRUE,
paste0("[Recorded] ", taicol_species$simple_scientificName), taicol_species$simple_scientificName)
fwrite(taicol_species, "www/data/processed/df_tree.csv",
row.names = F, quote = T)
df_time <- tbia[, c("id", "year", "month", "taxaSubGroup")]
fwrite(df_time, "www/data/processed/df_time.csv",
row.names = F, quote = T)
grid5km_sf <- st_read("www/data/layers/5km/0_05degree_tw_landocean_grid.shp")
# load the tbia table
df_map <- tbia[, c("id", "longitude", "latitude", "coordinatePrecision", "coordinateUncertaintyInMeters", "taxaSubGroup")]
## 1. exclude uncertainty in distance
table(df_map$coordinatePrecision)
table(df_map$coordinateUncertaintyInMeters)
df_map <- df_map[df_map$coordinateUncertaintyInMeters <= 5000,] # exclude > 5km (5000 meter) for 5km grid plotting
## 2. map All records to grid
df_map_stats <- df_map %>%
group_by(taxaSubGroup, latitude, longitude) %>%
count()
df_map_list <- split(df_map_stats, df_map_stats$taxaSubGroup)
catchLocation <- function(x){
x %>%
st_as_sf(coords = c("longitude", "latitude"), remove = FALSE) %>% # set coordinates
st_set_crs(4326) %>%  # table transform to polygon
st_join(., dg_grid, join = st_intersects, left = TRUE, largest = TRUE) %>%
st_drop_geometry(.)
}
cpu.cores <- detectCores() - 8
cl <- makeCluster(cpu.cores)
clusterEvalQ(cl, { # make sure all clusters are ready
library(tidyverse)
library(data.table)
library(sf)
library(lwgeom)
dg_grid <- st_read("tmp/layers/TW_WGS84_land&ocean_grids/0_05degree_tw_landocean_grid.shp")
dg_grid <- as(dg_grid, "sf")%>%
st_set_crs(4326)
sf_use_s2(F)
}
)
clusterEvalQ(cl, { # make sure all clusters are ready
library(tidyverse)
library(data.table)
library(sf)
library(lwgeom)
dg_grid <- st_read("www/data/layers/5km/0_05degree_tw_landocean_grid.shp")
dg_grid <- as(dg_grid, "sf")%>%
st_set_crs(4326)
sf_use_s2(F)
}
)
system.time(
df_map_grid <- parLapply(cl, df_map_list, catchLocation)%>%
do.call(rbind,.))
stopCluster(cl)
allOccCount_grid_table <- df_map_grid %>%
group_by(taxaSubGroup) %>%
summarise(allOccCount = sum(n))
fwrite(allOccCount_grid_table, "www/data/processed/df_spatial_allOccCount_grid_table.csv",
row.names = F, quote = T)
### 4 make All records shp
allOccCount <- df_map_grid %>%
group_by(id) %>%
summarise(occCount = sum(n))
### 4.1 combine grid counts with 5km geometry
allOccCount_grid <- merge(allOccCount, grid5km_sf, by = "id", all.x = TRUE)
st_write(allOccCount_grid, "www/data/processed/df_map.shp")
st_write(allOccCount_grid, "www/data/processed/df_map.shp", append = FALSE)
taxaOccCount <- df_map_grid %>%
group_by(taxaSubGroup, id) %>%
summarise(occCount = sum(n))
### 5.1 combine grid counts with 5km geometry
taxaOccCount_grid <- merge(taxaOccCount, grid5km_sf, by = "id", all.x = TRUE)
names(taxaOccCount_grid) <- c("id", "tSG", "occCount", "geometry") # rename because ESRI cannot save long field name
st_write(taxaOccCount_grid, "www/data/processed/df_taxa_map.shp", append = FALSE)
df_gapCount <- st_read("www/data/processed/df_map.shp")
df_gapCount <- df_gapCount %>%
mutate(priority = case_when(occCount < 10 ~ "Priority",
occCount >= 10 & occCount < 20 ~ "Intermediate",
occCount > 20 ~ "Non-priority"))
st_write(df_gapCount, "www/data/processed/df_gapCount_table.shp",
row.names = F, quote = T)
df_gapCount <- st_read("www/data/processed/df_map.shp")
df_gapCount <- df_gapCount %>%
mutate(priority = case_when(occCount < 10 ~ "Priority",
occCount >= 10 & occCount < 20 ~ "Intermediate",
occCount > 20 ~ "Non-priority"))
st_write(df_gapCount, "www/data/processed/df_gapCount_table.shp",
row.names = F, quote = T, append = FALSE)
# save as table
df_gapCount_table <- as.data.frame(df_gapCount) %>%
group_by(priority) %>%
summarise(gridCount = sum(occCount))
fwrite(df_gapCount_table, "www/data/processed/df_gapCount_table.csv",
row.names = F, quote = T)
shiny::runApp()
runApp()
rm(list = ls())
rm(list = ls())
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
src
getwd()
HTML(paste0(
"<br>",
"<a href='https://portal.taibif.tw/' target='_blank'><img style = 'display: block; margin-left: auto; margin-right: auto;' src='copilot1.jpg' width = '250'></a>",
"<br>",
"<p style = 'text-align: center;'><small><a href='https://portal.taibif.tw/' target='_blank'>https://portal.taibif.tw/</a></small></p>",
"<br>"
))
runApp()
install.packages("jpeg")
library(jpeg)
img <- readJPEG("copilot1.jpg")
print(img)
print(dim(img))
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
